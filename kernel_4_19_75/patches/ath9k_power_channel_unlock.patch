diff --git a/drivers/net/wireless/ath/ath9k/common-init.c b/drivers/net/wireless/ath/ath9k/common-init.c
index 82de0fadbc95..6c33acef073f 100644
--- a/drivers/net/wireless/ath/ath9k/common-init.c
+++ b/drivers/net/wireless/ath/ath9k/common-init.c
@@ -22,14 +22,14 @@
 	.band = NL80211_BAND_2GHZ, \
 	.center_freq = (_freq), \
 	.hw_value = (_idx), \
-	.max_power = 20, \
+	.max_power = 30, \
 }
 
 #define CHAN5G(_freq, _idx) { \
 	.band = NL80211_BAND_5GHZ, \
 	.center_freq = (_freq), \
 	.hw_value = (_idx), \
-	.max_power = 20, \
+	.max_power = 30, \
 }
 
 /* Some 2 GHz radios are actually tunable on 2312-2732
@@ -37,6 +37,27 @@
  * we have calibration data for all cards though to make
  * this static */
 static const struct ieee80211_channel ath9k_2ghz_chantable[] = {
+	CHAN2G(2312, 34), /* Channel -19 */
+ 	CHAN2G(2317, 35), /* Channel -18 */
+ 	CHAN2G(2322, 36), /* Channel -17 */
+ 	CHAN2G(2327, 37), /* Channel -16 */
+ 	CHAN2G(2332, 38), /* Channel -15 */
+ 	CHAN2G(2337, 39), /* Channel -14 */
+ 	CHAN2G(2342, 40), /* Channel -13 */
+ 	CHAN2G(2347, 41), /* Channel -12 */
+ 	CHAN2G(2352, 42), /* Channel -11 */
+ 	CHAN2G(2357, 43), /* Channel -10 */
+ 	CHAN2G(2362, 44), /* Channel -9 */
+ 	CHAN2G(2367, 45), /* Channel -8 */
+ 	CHAN2G(2372, 46), /* Channel -7 */
+ 	CHAN2G(2377, 47), /* Channel -6 */
+ 	CHAN2G(2382, 48), /* Channel -5 */
+ 	CHAN2G(2387, 49), /* Channel -4 */
+ 	CHAN2G(2392, 50), /* Channel -3 */
+ 	CHAN2G(2397, 51), /* Channel -2 */
+ 	CHAN2G(2402, 52), /* Channel -1 */
+
+ 	CHAN2G(2407, 53), /* Channel 0 */
 	CHAN2G(2412, 0), /* Channel 1 */
 	CHAN2G(2417, 1), /* Channel 2 */
 	CHAN2G(2422, 2), /* Channel 3 */
@@ -50,7 +71,29 @@ static const struct ieee80211_channel ath9k_2ghz_chantable[] = {
 	CHAN2G(2462, 10), /* Channel 11 */
 	CHAN2G(2467, 11), /* Channel 12 */
 	CHAN2G(2472, 12), /* Channel 13 */
-	CHAN2G(2484, 13), /* Channel 14 */
+
+	CHAN2G(2477, 13), /* Channel XX */
+ 	CHAN2G(2478, 14), /* Channel XX */
+ 	CHAN2G(2482, 15), /* Channel XX */
+ 	CHAN2G(2484, 16), /* Channel 14 */
+ 
+ 	CHAN2G(2487, 17), /* Channel XX */
+ 	CHAN2G(2489, 18), /* Channel XX */
+ 	CHAN2G(2492, 19), /* Channel XX */
+ 	CHAN2G(2494, 20), /* Channel XX */
+ 	CHAN2G(2497, 21), /* Channel XX */
+ 	CHAN2G(2499, 22), /* Channel XX */
+ 	CHAN2G(2512, 23), /* Channel XX */
+ 	CHAN2G(2532, 24), /* Channel XX */
+ 	CHAN2G(2572, 25), /* Channel XX */
+ 	CHAN2G(2592, 26), /* Channel XX */
+ 	CHAN2G(2612, 27), /* Channel XX */
+ 	CHAN2G(2632, 28), /* Channel XX */
+ 	CHAN2G(2652, 29), /* Channel XX */
+ 	CHAN2G(2672, 30), /* Channel XX */
+ 	CHAN2G(2692, 31), /* Channel XX */
+ 	CHAN2G(2712, 32), /* Channel XX */
+ 	CHAN2G(2732, 33), /* Channel XX */
 };
 
 /* Some 5 GHz radios are actually tunable on XXXX-YYYY
@@ -58,34 +101,38 @@ static const struct ieee80211_channel ath9k_2ghz_chantable[] = {
  * we have calibration data for all cards though to make
  * this static */
 static const struct ieee80211_channel ath9k_5ghz_chantable[] = {
+	CHAN5G(4920, 54), /* Channel XX */
+ 	CHAN5G(4940, 55), /* Channel XX */
+ 	CHAN5G(4960, 56), /* Channel XX */
+ 	CHAN5G(4980, 57), /* Channel XX */
 	/* _We_ call this UNII 1 */
-	CHAN5G(5180, 14), /* Channel 36 */
-	CHAN5G(5200, 15), /* Channel 40 */
-	CHAN5G(5220, 16), /* Channel 44 */
-	CHAN5G(5240, 17), /* Channel 48 */
+	CHAN5G(5180, 58), /* Channel 36 */
+	CHAN5G(5200, 59), /* Channel 40 */
+	CHAN5G(5220, 60), /* Channel 44 */
+	CHAN5G(5240, 61), /* Channel 48 */
 	/* _We_ call this UNII 2 */
-	CHAN5G(5260, 18), /* Channel 52 */
-	CHAN5G(5280, 19), /* Channel 56 */
-	CHAN5G(5300, 20), /* Channel 60 */
-	CHAN5G(5320, 21), /* Channel 64 */
+	CHAN5G(5260, 62), /* Channel 52 */
+	CHAN5G(5280, 63), /* Channel 56 */
+	CHAN5G(5300, 64), /* Channel 60 */
+	CHAN5G(5320, 65), /* Channel 64 */
 	/* _We_ call this "Middle band" */
-	CHAN5G(5500, 22), /* Channel 100 */
-	CHAN5G(5520, 23), /* Channel 104 */
-	CHAN5G(5540, 24), /* Channel 108 */
-	CHAN5G(5560, 25), /* Channel 112 */
-	CHAN5G(5580, 26), /* Channel 116 */
-	CHAN5G(5600, 27), /* Channel 120 */
-	CHAN5G(5620, 28), /* Channel 124 */
-	CHAN5G(5640, 29), /* Channel 128 */
-	CHAN5G(5660, 30), /* Channel 132 */
-	CHAN5G(5680, 31), /* Channel 136 */
-	CHAN5G(5700, 32), /* Channel 140 */
+	CHAN5G(5500, 66), /* Channel 100 */
+	CHAN5G(5520, 67), /* Channel 104 */
+	CHAN5G(5540, 68), /* Channel 108 */
+	CHAN5G(5560, 69), /* Channel 112 */
+	CHAN5G(5580, 70), /* Channel 116 */
+	CHAN5G(5600, 71), /* Channel 120 */
+	CHAN5G(5620, 72), /* Channel 124 */
+	CHAN5G(5640, 73), /* Channel 128 */
+	CHAN5G(5660, 74), /* Channel 132 */
+	CHAN5G(5680, 75), /* Channel 136 */
+	CHAN5G(5700, 76), /* Channel 140 */
 	/* _We_ call this UNII 3 */
-	CHAN5G(5745, 33), /* Channel 149 */
-	CHAN5G(5765, 34), /* Channel 153 */
-	CHAN5G(5785, 35), /* Channel 157 */
-	CHAN5G(5805, 36), /* Channel 161 */
-	CHAN5G(5825, 37), /* Channel 165 */
+	CHAN5G(5745, 77), /* Channel 149 */
+	CHAN5G(5765, 78), /* Channel 153 */
+	CHAN5G(5785, 79), /* Channel 157 */
+	CHAN5G(5805, 80), /* Channel 161 */
+	CHAN5G(5825, 81), /* Channel 165 */
 };
 
 /* Atheros hardware rate code addition for short preamble */
diff --git a/drivers/net/wireless/ath/ath9k/eeprom_4k.c b/drivers/net/wireless/ath/ath9k/eeprom_4k.c
index b8c0a08066a0..d293f8fef443 100644
--- a/drivers/net/wireless/ath/ath9k/eeprom_4k.c
+++ b/drivers/net/wireless/ath/ath9k/eeprom_4k.c
@@ -18,6 +18,10 @@
 #include "hw.h"
 #include "ar9002_phy.h"
 
+
+extern u8 thresh62_man;
+extern u8 txpower_man;
+
 static int ath9k_hw_4k_get_eeprom_ver(struct ath_hw *ah)
 {
 	u16 version = le16_to_cpu(ah->eeprom.map4k.baseEepHeader.version);
@@ -611,7 +615,7 @@ static void ath9k_hw_4k_set_txpower(struct ath_hw *ah,
 	    return;
 
 	for (i = 0; i < Ar5416RateSize; i++)
-		ratesArray[i] -= AR5416_PWR_TABLE_OFFSET_DB * 2;
+		ratesArray[i] = txpower_man;
 
 	ENABLE_REGWRITE_BUFFER(ah);
 
@@ -983,9 +987,9 @@ static void ath9k_hw_4k_set_board_values(struct ath_hw *ah,
 		REG_RMW_FIELD(ah, AR_PHY_RF_CTL3, AR_PHY_TX_END_TO_A2_RX_ON,
 			      pModal->txEndToRxOn);
 	REG_RMW_FIELD(ah, AR_PHY_CCA, AR9280_PHY_CCA_THRESH62,
-		      pModal->thresh62);
+		      thresh62_man);
 	REG_RMW_FIELD(ah, AR_PHY_EXT_CCA0, AR_PHY_EXT_CCA0_THRESH62,
-		      pModal->thresh62);
+		      thresh62_man);
 
 	if (ath9k_hw_4k_get_eeprom_rev(ah) >= AR5416_EEP_MINOR_VER_2) {
 		REG_RMW_FIELD(ah, AR_PHY_RF_CTL2, AR_PHY_TX_END_DATA_START,
diff --git a/drivers/net/wireless/ath/ath9k/eeprom_9287.c b/drivers/net/wireless/ath/ath9k/eeprom_9287.c
index 3caa149b1013..dd43c137c182 100644
--- a/drivers/net/wireless/ath/ath9k/eeprom_9287.c
+++ b/drivers/net/wireless/ath/ath9k/eeprom_9287.c
@@ -18,6 +18,8 @@
 #include "hw.h"
 #include "ar9002_phy.h"
 
+extern u8 txpower_man;
+
 #define SIZE_EEPROM_AR9287 (sizeof(struct ar9287_eeprom) / sizeof(u16))
 
 static int ath9k_hw_ar9287_get_eeprom_ver(struct ath_hw *ah)
@@ -742,7 +744,7 @@ static void ath9k_hw_ar9287_set_txpower(struct ath_hw *ah,
 		return;
 
 	for (i = 0; i < Ar5416RateSize; i++)
-		ratesArray[i] -= AR9287_PWR_TABLE_OFFSET_DB * 2;
+		ratesArray[i] = txpower_man;
 
 	ENABLE_REGWRITE_BUFFER(ah);
 
diff --git a/drivers/net/wireless/ath/ath9k/hif_usb.h b/drivers/net/wireless/ath/ath9k/hif_usb.h
index 7846916aa01d..f5ff877ee62d 100644
--- a/drivers/net/wireless/ath/ath9k/hif_usb.h
+++ b/drivers/net/wireless/ath/ath9k/hif_usb.h
@@ -61,7 +61,7 @@ extern int htc_use_dev_fw;
 #define MAX_PKT_NUM_IN_TRANSFER 10
 
 #define MAX_REG_OUT_URB_NUM  1
-#define MAX_REG_IN_URB_NUM   64
+#define MAX_REG_IN_URB_NUM   32
 
 #define MAX_REG_IN_BUF_SIZE 64
 
diff --git a/drivers/net/wireless/ath/ath9k/hw.c b/drivers/net/wireless/ath/ath9k/hw.c
index b4f7ee423d40..47ba9065e467 100644
--- a/drivers/net/wireless/ath/ath9k/hw.c
+++ b/drivers/net/wireless/ath/ath9k/hw.c
@@ -33,10 +33,36 @@
 static bool ath9k_hw_set_reset_reg(struct ath_hw *ah, u32 type);
 
 MODULE_AUTHOR("Atheros Communications");
-MODULE_DESCRIPTION("Support for Atheros 802.11n wireless LAN cards.");
+MODULE_DESCRIPTION("Support for Atheros 802.11n wireless LAN cards. DroneBridge version");
 MODULE_SUPPORTED_DEVICE("Atheros 802.11n WLAN cards");
 MODULE_LICENSE("Dual BSD/GPL");
 
+u8 cwmin_man = 7;
+u8 cwmax_man = 15;
+u8 aifs_man = 2;
+u8 slottime_man = 9;
+u8 thresh62_man = 28;
+u8 txpower_man = 58;
+
+module_param_named(txpower, txpower_man, byte, 0444);
+MODULE_PARM_DESC(txpower, "TX-power setting, 1-63, default 58");
+
+module_param_named(cwmin, cwmin_man, byte, 0444);
+MODULE_PARM_DESC(cwmin, "CWMIN setting, 0-255, default 7");
+
+module_param_named(cwmax, cwmax_man, byte, 0444);
+MODULE_PARM_DESC(cwmax, "CWMAX setting, 0-255, default 15");
+
+module_param_named(aifs, aifs_man, byte, 0444);
+MODULE_PARM_DESC(aifs, "AIFS setting, default 2");
+
+module_param_named(slottime, slottime_man, byte, 0444);
+MODULE_PARM_DESC(slottime, "Slottime setting, default 9");
+
+module_param_named(thresh62, thresh62_man, byte, 0444);
+MODULE_PARM_DESC(thresh62, "CCA THRESH62 setting, default 28");
+
+
 static void ath9k_hw_set_clockrate(struct ath_hw *ah)
 {
 	struct ath_common *common = ath9k_hw_common(ah);
@@ -1112,8 +1138,8 @@ void ath9k_hw_init_global_settings(struct ath_hw *ah)
 		slottime = ah->slottime;
 	}
 
-	/* As defined by IEEE 802.11-2007 17.3.8.6 */
-	slottime += 3 * ah->coverage_class;
+	/* As defined by config file */
+	slottime = slottime_man;
 	acktimeout = slottime + sifstime + ack_offset;
 	ctstimeout = acktimeout;
 
diff --git a/drivers/net/wireless/ath/ath9k/hw.h b/drivers/net/wireless/ath/ath9k/hw.h
index 68956cdc8c9a..3ee1686f3f4a 100644
--- a/drivers/net/wireless/ath/ath9k/hw.h
+++ b/drivers/net/wireless/ath/ath9k/hw.h
@@ -73,7 +73,7 @@
 
 #define ATH9K_RSSI_BAD			-128
 
-#define ATH9K_NUM_CHANNELS	38
+#define ATH9K_NUM_CHANNELS	82
 
 /* Register read/write primitives */
 #define REG_WRITE(_ah, _reg, _val) \
diff --git a/drivers/net/wireless/ath/ath9k/mac.c b/drivers/net/wireless/ath/ath9k/mac.c
index 58d02c19b6d0..4bce4a2be7c9 100644
--- a/drivers/net/wireless/ath/ath9k/mac.c
+++ b/drivers/net/wireless/ath/ath9k/mac.c
@@ -18,6 +18,11 @@
 #include "hw-ops.h"
 #include <linux/export.h>
 
+
+extern u8 cwmin_man;
+extern u8 cwmax_man;
+extern u8 aifs_man;
+
 static void ath9k_hw_set_txq_interrupts(struct ath_hw *ah,
 					struct ath9k_tx_queue_info *qi)
 {
@@ -216,7 +221,7 @@ bool ath9k_hw_set_txq_props(struct ath_hw *ah, int q,
 	if (qinfo->tqi_aifs != ATH9K_TXQ_USEDEFAULT)
 		qi->tqi_aifs = min(qinfo->tqi_aifs, 255U);
 	else
-		qi->tqi_aifs = INIT_AIFS;
+		qi->tqi_aifs = aifs_man;
 	if (qinfo->tqi_cwmin != ATH9K_TXQ_USEDEFAULT) {
 		cw = min(qinfo->tqi_cwmin, 1024U);
 		qi->tqi_cwmin = 1;
@@ -230,7 +235,7 @@ bool ath9k_hw_set_txq_props(struct ath_hw *ah, int q,
 		while (qi->tqi_cwmax < cw)
 			qi->tqi_cwmax = (qi->tqi_cwmax << 1) | 1;
 	} else
-		qi->tqi_cwmax = INIT_CWMAX;
+		qi->tqi_cwmax = cwmax_man;
 
 	if (qinfo->tqi_shretry != 0)
 		qi->tqi_shretry = min((u32) qinfo->tqi_shretry, 15U);
@@ -379,7 +384,7 @@ bool ath9k_hw_resettxqueue(struct ath_hw *ah, u32 q)
 	ath_dbg(common, QUEUE, "Reset TX queue: %u\n", q);
 
 	if (qi->tqi_cwmin == ATH9K_TXQ_USEDEFAULT) {
-		chanCwMin = INIT_CWMIN;
+		chanCwMin = cwmin_man;
 
 		for (cwMin = 1; cwMin < chanCwMin; cwMin = (cwMin << 1) | 1);
 	} else
diff --git a/drivers/net/wireless/ath/ath9k/mac.h b/drivers/net/wireless/ath/ath9k/mac.h
index fd6aa49adadf..641937e8c546 100644
--- a/drivers/net/wireless/ath/ath9k/mac.h
+++ b/drivers/net/wireless/ath/ath9k/mac.h
@@ -57,14 +57,18 @@
 #define OFDM_PLCP_BITS_QUARTER      22
 #define OFDM_SYMBOL_TIME_QUARTER    16
 
-#define INIT_AIFS       2
-#define INIT_CWMIN      15
-#define INIT_CWMIN_11B  31
-#define INIT_CWMAX      1023
-#define INIT_SH_RETRY   10
-#define INIT_LG_RETRY   10
-#define INIT_SSH_RETRY  32
-#define INIT_SLG_RETRY  32
+#define INIT_AIFS       0
+#define INIT_CWMIN      0
+#define INIT_CWMIN_11B  0
+#define INIT_CWMAX      0
+#define INIT_SH_RETRY   1
+#define INIT_LG_RETRY   1
+#define INIT_SSH_RETRY  3
+#define INIT_SLG_RETRY  3
+
+#define ATH9K_SLOT_TIME_6 1
+#define ATH9K_SLOT_TIME_9 1
+#define ATH9K_SLOT_TIME_20 1
 
 #define ATH9K_TXERR_XRETRY         0x01
 #define ATH9K_TXERR_FILT           0x02
diff --git a/drivers/net/wireless/ath/regd.c b/drivers/net/wireless/ath/regd.c
index e25bfdf78c2e..578421ee6700 100644
--- a/drivers/net/wireless/ath/regd.c
+++ b/drivers/net/wireless/ath/regd.c
@@ -33,33 +33,23 @@ static int __ath_regd_init(struct ath_regulatory *reg);
  */
 
 /* Only these channels all allow active scan on all world regulatory domains */
-#define ATH9K_2GHZ_CH01_11	REG_RULE(2412-10, 2462+10, 40, 0, 20, 0)
+#define ATH9K_2GHZ_CH01_11	REG_RULE(2312-10, 2462+10, 40, 0, 30, 0)
 
 /* We enable active scan on these a case by case basis by regulatory domain */
-#define ATH9K_2GHZ_CH12_13	REG_RULE(2467-10, 2472+10, 40, 0, 20,\
-					 NL80211_RRF_NO_IR)
-#define ATH9K_2GHZ_CH14		REG_RULE(2484-10, 2484+10, 40, 0, 20,\
-					 NL80211_RRF_NO_IR | \
-					 NL80211_RRF_NO_OFDM)
+#define ATH9K_2GHZ_CH12_13	REG_RULE(2467-10, 2472+10, 40, 0, 30, 0)
+#define ATH9K_2GHZ_CH14		REG_RULE(2484-10, 2732+10, 40, 0, 30, 0)
 
 /* We allow IBSS on these on a case by case basis by regulatory domain */
-#define ATH9K_5GHZ_5150_5350	REG_RULE(5150-10, 5350+10, 80, 0, 30,\
-					 NL80211_RRF_NO_IR)
-#define ATH9K_5GHZ_5470_5850	REG_RULE(5470-10, 5850+10, 80, 0, 30,\
-					 NL80211_RRF_NO_IR)
-#define ATH9K_5GHZ_5725_5850	REG_RULE(5725-10, 5850+10, 80, 0, 30,\
-					 NL80211_RRF_NO_IR)
+#define ATH9K_5GHZ_5150_5350	REG_RULE(4920-10, 5350+10, 80, 0, 30, 0)
+#define ATH9K_5GHZ_5470_5850	REG_RULE(5470-10, 5850+10, 80, 0, 30, 0)
+#define ATH9K_5GHZ_5725_5850	REG_RULE(5725-10, 5850+10, 80, 0, 30, 0)
 
-#define ATH9K_2GHZ_ALL		ATH9K_2GHZ_CH01_11, \
-				ATH9K_2GHZ_CH12_13, \
-				ATH9K_2GHZ_CH14
+#define ATH9K_2GHZ_ALL		ATH9K_2GHZ_CH01_11, ATH9K_2GHZ_CH12_13, ATH9K_2GHZ_CH14
 
-#define ATH9K_5GHZ_ALL		ATH9K_5GHZ_5150_5350, \
-				ATH9K_5GHZ_5470_5850
+#define ATH9K_5GHZ_ALL		ATH9K_5GHZ_5150_5350, ATH9K_5GHZ_5470_5850
 
 /* This one skips what we call "mid band" */
-#define ATH9K_5GHZ_NO_MIDBAND	ATH9K_5GHZ_5150_5350, \
-				ATH9K_5GHZ_5725_5850
+#define ATH9K_5GHZ_NO_MIDBAND	ATH9K_5GHZ_5150_5350, ATH9K_5GHZ_5725_5850
 
 /* Can be used for:
  * 0x60, 0x61, 0x62 */
@@ -77,9 +67,8 @@ static const struct ieee80211_regdomain ath_world_regdom_63_65 = {
 	.n_reg_rules = 4,
 	.alpha2 =  "99",
 	.reg_rules = {
-		ATH9K_2GHZ_CH01_11,
-		ATH9K_2GHZ_CH12_13,
-		ATH9K_5GHZ_NO_MIDBAND,
+		ATH9K_2GHZ_ALL,
+		ATH9K_5GHZ_ALL,
 	}
 };
 
@@ -88,8 +77,8 @@ static const struct ieee80211_regdomain ath_world_regdom_64 = {
 	.n_reg_rules = 3,
 	.alpha2 =  "99",
 	.reg_rules = {
-		ATH9K_2GHZ_CH01_11,
-		ATH9K_5GHZ_NO_MIDBAND,
+		ATH9K_2GHZ_ALL,
+		ATH9K_5GHZ_ALL,
 	}
 };
 
@@ -98,7 +87,7 @@ static const struct ieee80211_regdomain ath_world_regdom_66_69 = {
 	.n_reg_rules = 3,
 	.alpha2 =  "99",
 	.reg_rules = {
-		ATH9K_2GHZ_CH01_11,
+		ATH9K_2GHZ_ALL,
 		ATH9K_5GHZ_ALL,
 	}
 };
@@ -108,8 +97,7 @@ static const struct ieee80211_regdomain ath_world_regdom_67_68_6A_6C = {
 	.n_reg_rules = 4,
 	.alpha2 =  "99",
 	.reg_rules = {
-		ATH9K_2GHZ_CH01_11,
-		ATH9K_2GHZ_CH12_13,
+		ATH9K_2GHZ_ALL,
 		ATH9K_5GHZ_ALL,
 	}
 };
@@ -249,7 +237,7 @@ ieee80211_regdomain *ath_world_regdomain(struct ath_regulatory *reg)
 bool ath_is_49ghz_allowed(u16 regdomain)
 {
 	/* possibly more */
-	return regdomain == MKK9_MKKC;
+	return true;
 }
 EXPORT_SYMBOL(ath_is_49ghz_allowed);
 
@@ -258,9 +246,7 @@ static bool ath_is_radar_freq(u16 center_freq,
 			      struct ath_regulatory *reg)
 
 {
-	if (reg->country_code == CTRY_INDIA)
-		return (center_freq >= 5500 && center_freq <= 5700);
-	return (center_freq >= 5260 && center_freq <= 5700);
+	return false;
 }
 
 static void ath_force_clear_no_ir_chan(struct wiphy *wiphy,
